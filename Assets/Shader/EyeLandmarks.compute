// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//buffer
RWStructuredBuffer<float4> Vertecies;
//RWStructuredBuffer<float4> outputVertecies;


[numthreads(76,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!


     if (id.x < 32)
        {
            const int indices[] =
            {
                0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6, 7, 7, 8,
                8, 15, 15, 14, 14, 13, 13, 12, 12, 11, 11, 10, 10, 9, 9, 0
            };

            float2 p = Vertecies[indices[id.x] + 5].xy;

            Vertecies[id.x] = (float4(p, 0, 1));
        }

     else{
           float2 c = Vertecies[0].xy;
           float r = distance(Vertecies[1].xy, Vertecies[3].xy) / 2;

           float phi = 3.14 * 2 * (id.x / 2 + (id.x & 1) - 16) / 15;
           float2 p = c + float2(cos(phi), sin(phi)) * r;

           Vertecies[id.x] = float4(p, 0, 1);
          }

}
